@page
@model TechnicalTest.Pages.SalesOrders.IndexModel

@{
    ViewData["Title"] = "Sales Order";
}

<h1>Sales Orders</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a class="btn btn-primary" asp-page="Create">
        <i class="bi bi-plus-circle"></i> Create New
    </a>
    <button id="exportButton" class="btn btn-success" onclick="exportToExcel()">
        <i class="bi bi-file-earmark-arrow-down"></i> Export to Excel
    </button>
</div>

<table id="salesOrderTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>
                Sales Order No
                <br />
                <input type="text" class="form-control form-control-sm filter-input" data-column="0" placeholder="Filter by Order No">
            </th>
            <th>
                Customer Name
                <br />
                <input type="text" class="form-control form-control-sm filter-input" data-column="1" placeholder="Filter by Customer Name">
            </th>
            <th>
                Order Date
                <br />
                <input type="date" class="form-control form-control-sm filter-input" data-column="2">
            </th>
            <th>
                Total Amount
                <br />
                <input type="number" class="form-control form-control-sm filter-input" data-column="3" placeholder="Filter by Amount">
            </th>
            <th class="text-center">
                Actions
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.SalesOrder)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.SalesOrderNo)</td>
                <td>@Html.DisplayFor(modelItem => item.CustomerName)</td>
                <td>@Html.DisplayFor(modelItem => item.OrderDate)</td>
                <td>@Html.DisplayFor(modelItem => item.TotalAmount)</td>
                <td class="text-center">
                    <!-- Centering Buttons -->
                    <a class="btn btn-sm btn-warning" asp-page="./Edit" asp-route-id="@item.Id">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a class="btn btn-sm btn-info" asp-page="./Details" asp-route-id="@item.Id">
                        <i class="bi bi-info-circle"></i> Details
                    </a>
                    <a class="btn btn-sm btn-danger" asp-page="./Delete" asp-route-id="@item.Id">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Bootstrap Icons CDN *@
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>

@section Scripts {
    <script>
        document.querySelectorAll(".filter-input").forEach(input => {
            input.addEventListener("input", function () {
                const column = this.dataset.column;
                const value = this.value.toLowerCase();
                const rows = document.querySelectorAll("#salesOrderTable tbody tr");

                rows.forEach(row => {
                    const cell = row.cells[column];
                    if (cell) {
                        const cellValue = cell.textContent.toLowerCase();
                        if (cellValue.indexOf(value) > -1) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    }
                });
            });
        });

        // Export Table to Excel (CSV format)
             function exportToExcel() {
            const table = document.getElementById("salesOrderTable");
            const rows = table.querySelectorAll("tr");
            let csvContent = "data:text/csv;charset=utf-8,";

            // Loop through each row and process the data
            rows.forEach(row => {
                let rowData = [];
                row.querySelectorAll("th, td").forEach(cell => {
                    // Clean the text to ensure proper CSV formatting
                    let cellText = cell.innerText.replace(/,/g, ""); // Remove any commas to avoid breaking CSV structure
                    rowData.push(`"${cellText}"`);  // Wrap the text in quotes to handle commas or special characters properly
                });

                // Join the row data by commas and add a newline after each row
                csvContent += rowData.join(",") + "\n";
            });

            // Encode the CSV content for download
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.href = encodedUri;
            link.download = "SalesOrders.csv";  // Specify the download file name
            document.body.appendChild(link);  // Append the link to the DOM
            link.click();  // Trigger the download
            document.body.removeChild(link);  // Clean up by removing the link
        }

    </script>
}
